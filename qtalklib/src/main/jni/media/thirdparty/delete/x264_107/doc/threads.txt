Historical notes:
Slice-based threads was the original threading model of x264.  It was replaced with frame-based threads in r607.  This document was originally written at that time.  Slice-based threading was brought back (as an optional mode) in r1364 for low-latency encoding.  Furthermore, frame-based threading was modified significantly in r1246, with the addition of threaded lookahead.

Old threading method: slice-based
application calls x264
x264 runs B-adapt and ratecontrol (serial)
split frame into several slices, and spawn a thread for each slice
wait until all threads are done
deblock and hpel filter (serial)
return to application
In x264cli, there is one additional thread to decode the input.

New threading method: frame-based
application calls x264
x264 requests a frame from lookahead, which runs B-adapt and ratecontrol parallel to the current thread, separated by a buffer of size sync-lookahead
spawn a thread for this frame
thread runs encode, deblock, hpel filter
meanwhile x264 waits for the oldest thread to finish
return to application, but the rest of the threads continue running in the background
No additional threads are needed to decode the input, unless decoding is slower than slice+deblock+hpel, in which case an additional input thread would allow decoding in parallel.

Penalties for slice-based threading:
Each slice adds some bitrate (or equivalently reduces quality), for a variety of reasons: the slice header costs some bits, cabac contexts are reset, mvs and intra samples can't be predicted across the slice boundary.
In CBR mode, multiple slices encode simultaneously, thus increasing the maximum misprediction possible with VBV.
Some parts of the encoder are serial, so it doesn't scale well with lots of cpus.

Some numbers on penalties for slicing:
Tested at 720p with 45 slices (one per mb row) to maximize the total cost for easy measurement. Averaged over 4 movies at crf20 and crf30. Total cost: +30% bitrate at constant psnr.
I enabled the various components of slicing one at a time, and measured the portion of that cost they contribute:
    * 34% intra prediction
    * 25% redundant slice headers, nal headers, and rounding to whole bytes
    * 16% mv prediction
    * 16% reset cabac contexts
    * 6% deblocking between slices (you don't strictly have to turn this off just for standard compliance, but you do if you want to use slices for decoder multithreading)
    * 2% cabac neighbors (cbp, skip, etc)
The proportional cost of redundant headers should certainly depend on bitrate (since the header size is constant and everything else depends on bitrate). Deblocking should too (due to varing deblock strength).
But none of the proportions should depend strongly on the number of slices: some are triggered per slice while some are triggered per macroblock-that's-on-the-edge-of-a-slice, but as long as there's no more than 1 slice per row, the relative frequency of those two conditions is determined solely by the image width.


Penalties for frame-base threading:
To allow encoding of multiple frames in parallel, we have to ensure that any given macroblock uses motion vectors only from pieces of the reference frames that have been encoded already. This is usually not noticeable, but can matter for very fast upward motion.
We have to commit to one frame type before starting on the frame. Thus scenecut detection must run during the lowres pre-motion-estimation along with B-adapt, which makes it faster but less accurate than re-encoding the whole frame.
Ratecontrol gets delayed feedback, since it has to plan frame N before frame N-1 finishes.

NOTE: these benchmarks are from the original implementation of frame-based threads.  They are likely not entirely accurate today, nor do the commandlines match up with modern x264.  However, they still give a good idea of the relative performance of frame and slice-based threads.

Benchmarks:
cpu: 4x woodcrest 3GHz
content: 480p

x264 -B1000 -b2 -m1 -Anone
threads  speed           psnr
       old   new      old    new
1:   1.000x 1.000x   0.000  0.000
2:   1.168x 1.413x  -0.038 -0.007
3:   1.208x 1.814x  -0.064 -0.005
4:   1.293x 2.329x  -0.095 -0.006
5:          2.526x         -0.007
6:          2.658x         -0.001
7:          2.723x         -0.018
8:          2.712x         -0.019

x264 -B1000 -b2 -m5
threads  speed           psnr   
       old   new      old    new
1:   1.000x 1.000x   0.000  0.000
2:   1.319x 1.517x  -0.036 -0.006
3:   1.466x 2.013x  -0.068 -0.005
4:   1.578x 2.741x  -0.101 -0.004
5:          3.022x         -0.015
6:          3.221x         -0.014
7:          3.331x         -0.020
8:          3.425x         -0.025

x264 -B1000 -b2 -m6 -r3 -8 --b-rdo
threads  speed           psnr   
       old   new      old    new
1:   1.000x 1.000x   0.000  0.000
2:   1.531x 1.707x  -0.032 -0.006
3:   1.866x 2.277x  -0.061 -0.005
4:   2.097x 3.204x  -0.088 -0.006
5:          3.468x         -0.013
6:          3.629x         -0.010
7:          3.716x         -0.014
8:          3.745x         -0.018

